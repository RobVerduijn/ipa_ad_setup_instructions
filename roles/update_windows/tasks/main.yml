
---
- name: ensure winrm service has delayed start
  win_service:
    name: WinRM
    state: started
    start_mode: delayed

- name: ensure windows update service is stopped
  win_service:
    name: wuauserv
    state: stopped
    start_mode: disabled

- name: check if windows update service is stopped
  win_shell: (Get-Service -name wuauserv).status
  register: state_services
  until: "'Stopped' in state_services.stdout"
  retries: 360
  delay: 10

- name: check for pending reboot
  win_shell: "{{ lookup('file', 'check_pending_reboot.ps1') }}"
  register: pending_reboot
  changed_when: false

- name: reboot system
  win_reboot:
    post_reboot_delay: '60'
    reboot_timeout: '1800'
  when: pending_reboot.stdout_lines[0] == 'True'

- name: clean windows update download folder
  win_file:
    path: C:\Windows\SoftwareDistribution\Download
    state: absent
  register: remove_res
  retries: 3
  until: not remove_res.failed | bool
  ignore_errors: true
  delay: 10

- name: ensure windows update service is running
  win_service:
    name: wuauserv
    state: started
    start_mode: auto

- block:
  - name: Check for updates
    win_updates:
      category_names:
        - Application
        - Connectors
        - CriticalUpdates
        - DefinitionUpdates
        - DeveloperKits
        - Drivers
        - FeaturePacks
        - Guidance
        - SecurityUpdates
        - ServicePacks
        - Tools
        - UpdateRollups
        - Updates
      state: installed
      log_path: c:\ansible_wu.txt
    register: win_update
#    until: >-
#      ( win_update.reboot_required is defined and win_update.reboot_required | bool )
#      or
#      ( win_update.found_update_count is defined and win_update.found_update_count | int == 0 )
#    retries: 2
    ignore_errors: true

  - name: reboot system
    win_reboot:
      post_reboot_delay: '60'
      reboot_timeout: '1800'
    when:
    - win_update.reboot_required is defined
    - win_update.reboot_required | bool

  always:
  - name: ensure windows update service is stopped
    win_service:
      name: wuauserv
      state: stopped
      start_mode: disabled

- name: win_update results
  debug:
    var: win_update

# because we can't loop blocks we use recursion
# the recursion ends when
# - found_update_count is defined
# - installed_update_count is defined
# - there is no more reboot required
# - the found_update_count equals the_installed_update_count
- name: call update_windows again
  include_role:
    name: update_windows
  when: >
    ( win_update.found_update_count is not defined ) or
    ( win_update.installed_update_count is not defined ) or
    ( win_update.reboot_required is defined and win_update.reboot_required | bool ) or
    ( win_update.found_update_count != win_update.installed_update_count )
